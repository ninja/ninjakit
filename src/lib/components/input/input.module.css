.button,
.error,
.field,
.helper,
.input,
.label,
.row {
	composes: nk from global;
}

.field {
	/* align-self: flex-start; */
	display: flex;
	flex-direction: column;
	gap: 0.4rem;
}

.row {
	align-items: center;
	display: flex;
	height: 4.8rem;
	justify-content: space-between;
	position: relative;
	width: fit-content;
}

.input {
	caret-color: var(--md-color-primary);
	color: var(--md-color-on-surface);
	font-size: 1.4rem;
	height: 100%;
	padding: 0 1.6rem;
	position: relative;
	transition: border-color border-width 300ms ease-in-out;
}

.input:placeholder-shown + .label {
	color: var(--md-color-outline);
}

.input::placeholder {
	opacity: 0;
}

.label {
	color: var(--md-color-outline);
	cursor: text;
	font-size: 1.4rem;
	left: 1.6rem;
	position: absolute;
	transform: translate3d(0, 0, 0);
	transition: font-size, left, transform 150ms ease;
	user-select: none;
}

.button {
	cursor: pointer;
	position: absolute;
	right: 1.6rem;
}

.button:focus-visible > svg {
	fill: var(--md-color-primary);
}

.errorMessage,
.helperMessage {
	font-size: 1.1rem;
	margin-left: 1.6rem;
}

.errorMessage {
	color: var(--md-color-error);
}

.helperMessage {
	color: var(--md-color-on-surface);
}

.row svg {
	fill: var(--md-color-outline);
	height: 1.8rem;
	width: 1.8rem;
}

.row > svg:first-child {
	left: 1.6rem;
	position: absolute;
}

.field.leadingIcon > .row > .input {
	padding-left: 4.2rem;
}

.field.leadingIcon > .row > .label {
	left: 4.2rem;
}

.input:focus-within + .label,
.input:not(:placeholder-shown) + .label {
	font-size: 1.1rem;
}

.input:focus-within + .label {
	color: var(--md-color-primary);
}

.input:-webkit-autofill {
	transition-delay: 6000s;
	transition-property: background-color, color;
}

.filled > .row::before,
.filled > .row > .input {
	border-radius: 0.4rem 0.4rem 0 0;
}

.filled > .row::before {
	background-color: var(--md-color-primary);
	content: "";
	inset: 0;
	opacity: 0.12;
	position: absolute;
}

.filled > .row > .input {
	box-shadow: 0 0.1rem 0 0 var(--md-color-outline);
	padding-top: 1.6rem;
}

.filled > .row > .input:hover {
	box-shadow: 0 0.2rem 0 0 var(--md-color-outline);
}

.filled > .row > .input:focus-within {
	box-shadow: 0 0.2rem 0 0 var(--md-color-primary);
}

.filled.error > .row > .input {
	box-shadow: 0 0.2rem 0 0 var(--md-color-error);
}

.row:focus-within::before {
	opacity: 0.08;
}

.filled > .row > .input:focus-within + .label,
.filled > .row > .input:-webkit-autofill + .label,
.filled > .row > .input:not(:placeholder-shown) + .label {
	transform: translate3d(0, -1rem, 0);
}

.outlined > .row,
.outlined > .row > .label {
	background-color: var(--md-color-surface);
}

.outlined > .row > .input {
	border-radius: 0.4rem;
	box-shadow: 0 0 0 0.1rem var(--md-color-outline);
}

.outlined > .row > .input:hover {
	box-shadow: 0 0 0 0.2rem var(--md-color-outline);
}

.outlined > .row > .input:focus-within {
	box-shadow: 0 0 0 0.2rem var(--md-color-primary);
}

.outlined.error > .row > .input {
	box-shadow: 0 0 0 0.2rem var(--md-color-error);
}

.outlined > .row > .input:focus-within + .label,
.outlined > .row > .input:-webkit-autofill + .label,
.outlined > .row > .input:not(:placeholder-shown) + .label {
	left: 0.8rem;
	padding: 0 0.4rem;
	transform: translate3d(0, -2.4rem, 0);
}

.error > .row > .input {
	caret-color: var(--md-color-error);
}

.error > .row > .label {
	color: var(--md-color-error);
}

@media screen and (min-width: 600px) {
	.input {
		font-size: 1.6rem; /* mobile Safari auto-zooms anything < 16px */
	}
}
